
Angular - это основанная на JavaScript внешняя среда веб-приложений с открытым исходным кодом, 

в основном поддерживаемая Google и сообществом частных лиц и корпораций для решения многих проблем, возникающих при разработке одностраничных приложений.
--- 
a framework for client-side model–view–controller (MVC) 
and model–view–viewmodel (MVVM) architectures,
along with components commonly used in rich Internet applications.

framework клиент-серверной модели-просмотра-контроллера (MVC)
И модели представления-представления-представления (MVVM),
Наряду с компонентами, обычно используемыми в богатых интернет-приложениях.
---
История разработки[править | править вики-текст]
AngularJS разработан в 2009 году Мишко Хевери и Адамом Абронсом в Brat Tech LLC как программное обеспечение позади сервиса хранения JSON-данных, измеряющихся мегабайтами, для облегчения разработки корпоративных приложений. Сервис располагался на домене «GetAngular.com» и имел нескольких зарегистрированных пользователей, прежде чем они решили отказаться от идеи бизнеса и выпустить Angular как библиотеку с открытым исходным кодом.

Абронс покинул проект, но Хевери, работающий в Google, продолжает развивать и поддерживать библиотеку с другими сотрудниками Google Игорем Минаром и Войта Джином.

Философия Angular[править | править вики-текст]
AngularJS спроектирован с убеждением, что декларативное программирование лучше всего подходит для построения пользовательских интерфейсов и описания программных компонентов[5], в то время как императивное программирование отлично подходит для описания бизнес-логики[6]. Фреймворк адаптирует и расширяет традиционный HTML, чтобы обеспечить двустороннюю привязку данных для динамического контента, что позволяет автоматически синхронизировать модель и представление. В результате AngularJS уменьшает роль DOM-манипуляций и улучшает тестируемость.

Цели разработки[править | править вики-текст]
Отделение DOM-манипуляции от логики приложения, что улучшает тестируемость кода.
Отношение к тестированию как к важной части разработки. Сложность тестирования напрямую зависит от структурированности кода.[7][8]
Разделение клиентской и серверной стороны, что позволяет вести разработку параллельно.
Проведение разработчика через весь путь создания приложения: от проектирования пользовательского интерфейса, через написание бизнес-логики, к тестированию.
Angular придерживается MVC-шаблона проектирования и поощряет слабую связь между представлением, данными и логикой компонентов. Используя внедрение зависимости, Angular переносит на клиентскую сторону такие классические серверные службы, как видозависимые контроллеры. Следовательно, уменьшается нагрузка на сервер и веб-приложение становится легче.

===============================================================



Angular 2 to AngularJS  это два совершенно разных продукта (популярное сравнение Java и JavaScript).

В начале 2015 года  Весной 2015


В 2017 вышела вполне сформаваный реализ Angular под номером 4 (марте 2017 года нас ждет релиз Angular 4)
В 2017 году хедхантеры будут бегать за разработчиками, знающими Angular 2.

чего 4
Спецификация семантического версионирования будет поддерживать семантическое версионирование (SEMVER).

Конференсия Angular Team  решено, что переход от версии 2 до версии 4, 5,… не должен быть таким болезненным, как это было с первой версией. 

Angular 5 в 2017 году.
Как вы, возможно, уже догадались, термин «Angular 2» будет устаревшим с выходом 4-ой или 5-ой версии. Тем не менее, теперь следует начать называть его просто «Angular» без версии. Кроме того, вы должны начать избегать библиотек с GitHub/NPM с префиксом ng2- или angular2.

Angular 4 Март 2017
Angular 5 Сентябрь 2017
Angular 6 Март 2018
Angular 7 Сентябрь 2018


===============================================================


===============================================================

Статистика (на сентябрь 2016 года)

1.2 миллиона разработчиков использующих Angular 1
623 тысячи уже используют Angular 2

Если Angular 1 был монолитным проектом, то теперь Angular 2 следует рассматривать как платформу.

Angular 2 теперь более легкая, быстрее и более стабильный framework JavaScript (JS), чем когда-либо прежде.

Изначально Angular 1 весил 56K. При этом ядро самого Angular 2 было — 170K. Angular Team оптимизировали тонны кода и теперь ядро Angular 2 весит 45K.

Быстрый рендеринг
По сравнению с первой версией приложения на Angular 2 работают в 2,5 раза быстрее, а перерисовка в 4,2 раза быстрее. 

Отложенная загрузка
Основная задача Angular Team была в том, чтобы добиться автоматической отложенной загрузки. Это гарантирует нашим приложениям только то, что необходимо для текущей страницы. Ленивая загрузка также была включена при маршрутизации в приложениях. (Асинхронная и отложенная загрузка)

Официальное руководство по написанию кода

Большое количество туториалов

Опциональная типизация в вашем web-приложении
Есть много интересных вещей, которые может сделать TypeScript. Есть много причин, почему вы должны использовать TypeScript. Благодаря TypeScript Angular 2 стал лучше развиваться.

Хорошие инструменты для отладки

Платформа для разработки бизнес-приложений Firebase

Вы можете построить приложение в режиме реального времени с Angular 2, Firebase и AngularFire2 примерно за 10 минут, например чат. Есть много функциональных возможностей, которые реализуются в короткий промежуток времени.

Кроссплатформенные мобильные приложения с NativeScript + Angular 2
В то время как Angular Mobile Toolkit сосредоточено на создании прогрессивных веб-приложений, NativeScript больше заинтересован на создании нативных приложений с Angular 2.

Простое тестирование благодаря зонам
Zone.js библиотека для управления асинхронными задачи, способ управления контекстом выполнения. Много фантастических слов, но основная идея состоит в том, что тестирование будет намного проще в Angular 2

Zone.js исользует для работы Promise, Event managers, socket

===============================================================


Прогрессивные web-приложения с Angular Mobile Toolkit

Angular Mobile Toolkit позволит легко создавать веб-приложений, которые загружаются мгновенно на любом устройстве, даже без подключения к Интернету.
Прогрессивные веб-приложения очень интересны для многих веб-разработчиков. Создание и повторное использование вашего кода для создания мобильного приложения с хорошей производительностью, почти равное нативному мобильному приложению. Angular Mobile Toolkit является еще одним шагом к осуществлению этой мечты.

===============================================================

Большой проблемой приложений на Angular 1 было то, что они собирались только в браузере. Это означает, что ваши приложения были совершенно SEO-неориентированные.

Команда Angular вынесли основной компонент сборки, и теперь ваши приложения можно собирать где угодно, в том числе и на сервере.

Достаточно легко это сделать при помощи NodeJS для сборки шаблонов на стороне сервера.


===============================================================


Angular2 Webpack Starter 
Быстрая разработка приложения через терминал при помощи Angular CLI


===============================================================

Popular sites using AngularJS
Google.com
Youtube.com
Weather.com
Docker.com
Springer.com
Aceticket.com


Companies that use Angular.JS
PayPal
Upwork
The Guardian
Nike
Google
HBO
Sony
General Motors

Companies that use React
Alipay
Airbnb
Dropbox
Facebook
Netflix
Reddit

===============================================================
Разработка на Angular 2 и его ресурсы
ресурсов для Angular огромное множество, самые интересны.

DEVELOPMENT

    IDES (Среды разработки)
        Angular IDE by Webclipse
        IntelliJ IDEA
        Visual Studio Code
        WebStorm - Легкий, но мощный IDE, отлично оснащенный для комплексной разработки на стороне клиента и разработки на стороне сервера с помощью Node.js

    TOOLING (инструменты)
        Angular CLI - Официальный Angular CLI позволяет легко создавать и разрабатывать приложения от первоначальной фиксации до развертывания производства. Это уже следует нашим передовым практикам прямо из коробки!
        Angular Universal - Server-side Rendering for Angular 2 apps.
        Augury - A Google Chrome Dev Tools extension for debugging Angular 2 applications.
        Celerio Angular Quickstart - Generate an Angular 2 CRUD application from an existing database schema
        Codelyzer - A set of tslint rules for static code analysis of Angular 2 TypeScript projects.
        Lite-server - Lightweight development only node server

    DATA LIBRARIES БИБЛИОТЕКИ Стороние
        Angular Fire - Официальная библиотека Firebase и Angular 2
        Apollo - это стек данных для современных приложений, созданных с помощью GraphQL.
        Meteor - Используйте Angular 2 и Meteor для создания приложений JavaScript с полным стеком для мобильных и настольных компьютеров.
        ngrx - Реактивные расширения для angular2

    UI COMPONENTS
        ag-Grid
        Angular Material 2 - Material Design components for Angular 2
        Clarity Design System - UX guidelines, HTML/CSS framework, and Angular components 
        Kendo UI - One of the first major UI frameworks to support Angular 2
        ng-bootstrap - The Angular 2 version of the Angular UI Bootstrap library. Used  Bootstrap 4 CSS framework.
        Prime Faces - PrimeNG is a collection of rich UI components for Angular 2
        Onsen UI - UI components for hybrid mobile apps with bindings for both Angular 1 & 2. (интерфейс для гибридных мобильных )
        Semantic UI - UI components for Angular using Semantic UI

    CROSS-PLATFORM DEVELOPMENT (Ресурсы для кросс-платформанной разработки)
        Electron - Electron Platform for Angular 2.
        Ionic - Ionic offers a library of mobile-optimized HTML, CSS and JS components and tools for building highly interactive native and progressive web apps.
        NativeScript - NativeScript is how you build cross-platform, native iOS and Android apps with Angular and TypeScript. Get 100% access to native APIs via JavaScript and reuse of packages from NPM, CocoaPods and Gradle. Open source and backed by Telerik.​​​
        ReactNative - Angular 2 and React Native to build applications for Android and iOS
        Windows (UWP) - An Universal Windows App (uwp) powered by Angular 2

    EDUCATION - ОБРАЗОВАНИЕ
        Angular 2 Book
        Angular Router

    // Google Chart Tools Directive For AngularJS //



===============================================================

Angular 2 плюсы

Support for web components.
Поддержка веб-компонентов. Вместо того, чтобы иметь закрытую систему для модуляции приложений AngularJS, основы Angular 2 лежат на новом стандарте веб-компонентов. Это означает, что AngularJS сможет напрямую, без каких-либо оберточных кодировок, использовать любой компонент, написанный как веб-компонент.

Usage of Typescript. 
Использование машинописного текста. Самой большой точкой продажи TypeScript является инструментарий. Он предоставляет расширенные функции автозаполнения, навигации и рефакторинга. Наличие таких инструментов является почти обязательным требованием для крупных проектов.

Great performance. 
Отличное выступление. Angular2 - не делает сравнения глубоких объектов. Если элементы добавлены / удалены в / из массива, обнаружение изменений не обнаружит его. То же самое для свойств объекта, если они не связаны непосредственно с представлением.

Angular2 CLI. 
Angular2 CLI. Утилита Angular2 CLI позволяет легко создать приложение, которое уже работает, прямо из коробки. Это уже следует нашим рекомендациям!

Большой плюс — его нативная поддержка Dart. Dart — язык программирования, созданный Google. Dart позиционируется в качестве замены/альтернативы JavaScript.
Крупнейшая рекламная площадка в мире  Google AdWords использует технологии (Angular 2 + Dart).



Angular 2 минусы

Difficulty in learning.
Трудность в обучении. Если вы раньше не пользовались машинописными текстами, вам нужно научиться этому и потратить время на это.

Regular DOM
Обычный DOM. Угловое манипулирование фактическим DOM напрямую, что делает его более медленным и неэффективным по сравнению с React.

Difficulties in the server templating
Трудности с серверными шаблонами Угловой 2 по-прежнему сохраняет физическое разделение между JavaScript, управляющим вашим приложением, и отображаемым HTML.


===============================================================
Angular, а не React

мнуса React
- Нет сущности для событий. Т.е. компоненты могут общаться только с помощью коллбеков, которые вверх всплывают.
- Нет Dependency Injection (DI) из коробки. Из-за этого приходится немного костылей вставлять в виде High Order Component (A higher-order component)
- Нет типизации на уровне языка для описания интерфейсов компонентов (только встроенная через propTypes и возможность привернуть Flow).
- JSX — на тему которого есть много мнений за и против, т.е. смешивать ли вёрстку и код или нет.

То есть, в целом, React умеет все, у него много точек расширения, отданных на откуп внешним разработчикам, но при этом не так много ресурсов «из коробки». В нашем случае — это не очень хорошо?

===============================================================
основные конкуренты Angular 2


React. Тут сталкиваются не только экосистемы, но и религии в каком-то смысле (JSX). 

Aurelia. Это тоже достаточно молодой фреймворк, написан выходцем из Google, который разочаровался в Angular 2 и решил написать свою библиотеку «с преферансом и куртизантками». Выглядит достаточно перспективно, но порой создаётся впечатление, что он писался, исходя из принципа «назло маме отморожу уши».

Polymer. Тут Google конкурирует сам с собой. Впрочем, не совсем корректно их сравнивать, все же Polymer — это скорее огромная библиотека компонентов, а не цельный фреймворк.

Как ни странно — Angular. Как и всегда бывает с выходом новой версии чего-либо, достаточно трудно понять, зачем переходить на свежую версию, тратить силы и время.



===============================================================


Вместо того, чтобы создавать новый новый язык программирования, Google уже сделал это, поскольку Dart-AtScript разработан для работы не только с ECMAScript 5 и с предстоящим ECMAScript 6, но и над расширенным языком Microsoft TypeScript.

introspection - самоанализ, интроспекция, самонаблюдение

Цель AtScript - сделать данные аннотации типа доступными во время выполнения, также известными как тип introspection, чтобы усилить JavaScript с аннотациями типа, поля и метаданных.
\

AtScript - это скриптовый язык на основе JavaScript, расширяющий «TypeScript от Microsoft» и транскодирование в JavaScript. 

Он был представлен в октябре 2014 года на конференции ng-Europe разработчиками веб-платформы Google AngularJS в качестве языка, на котором будет построен предстоящий Angular 2.0. [1] [2]
Первоначально AtScript предназначался для работы поверх MachScript, включая некоторые функции от Dart. В октябре 2014 года Google объявила, что Angular 2.0 будет написана на AtScript. [3] В марте 2015 года Microsoft объявила, что многие функции AtScript будут реализованы в Releasecript 1.5, а Angular 2.0 - на чистом машинописном тексте. [4]

Название «AtScript» происходит от символа @ «at», используемого для аннотаций на многих языках.


===============================================================

Dart is a general-purpose programming language originally developed by Google and later approved as a standard by Ecma (ECMA-408).[4] It is used to build web, server and mobile applications[5], and for Internet of Things (IoT) devices.[6] It is open-source software under a permissive free software license (modified BSD license).

Dart is an object-oriented, class defined, single inheritance language[citation needed] using C# style syntax that transcompiles optionally into JavaScript. It supports interfaces, mixins, abstract classes, reified generics, optional typing, and a sound type system[7].

Dart - это язык программирования общего назначения, первоначально разработанный компанией Google и впоследствии одобренный в качестве стандарта компанией Ecma (ECMA-408). [4] Он используется для создания веб-приложений, серверов и мобильных приложений [5], а также для устройств Internet of Things (IoT). [6] Это программное обеспечение с открытым исходным кодом в рамках разрешающей лицензии свободного программного обеспечения (модифицированная лицензия BSD).

Dart - объектно-ориентированный, определенный классом, язык одиночного наследования [citation needed] с использованием синтаксиса стиля C #, который транскодирует необязательно в JavaScript. Он поддерживает интерфейсы, mixins, абстрактные классы, reified generics, факультативную типизацию и систему звукового типа [7].
===============================================================



